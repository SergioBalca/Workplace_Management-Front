{"ast":null,"code":"var _jsxFileName = \"/home/shara/Workplace_Management/Frontend/src/services/Signup.jsx\";\nimport React from 'react';\nimport { Formik, Form } from 'formik';\nimport { TextField } from './TextField';\nimport * as Yup from 'yup';\nimport { Link } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Signup = () => {\n  const validate = Yup.object({\n    firstName: Yup.string().min(3, 'Must be 15 characters or less').max(15, 'Must be 15 characters or less').required('Required'),\n    lastName: Yup.string().max(20, 'Must be 20 characters or less').required('Required'),\n    email: Yup.string().email('Email is invalid').required('Email is required'),\n    password: Yup.string().min(6, 'Password must be at least 6 charaters').required('Password is required'),\n    confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], 'Password must match').required('Confirm password is required')\n  });\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n      confirmPassword: ''\n    },\n    validationSchema: validate,\n    onSubmit: values => {\n      console.log(values);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_c = Signup;\n\nvar _c;\n\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"names":["React","Formik","Form","TextField","Yup","Link","Signup","validate","object","firstName","string","min","max","required","lastName","email","password","confirmPassword","oneOf","ref","values","console","log"],"sources":["/home/shara/Workplace_Management/Frontend/src/services/Signup.jsx"],"sourcesContent":["import React from 'react';\nimport { Formik, Form } from 'formik';\nimport { TextField } from './TextField';\nimport * as Yup from 'yup';\nimport { Link } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nexport const Signup = () => {\n  const validate = Yup.object({\n    firstName: Yup.string()\n      .min(3, 'Must be 15 characters or less')\n      .max(15, 'Must be 15 characters or less')\n      .required('Required'),\n    lastName: Yup.string()\n      .max(20, 'Must be 20 characters or less')\n      .required('Required'),\n    email: Yup.string()\n      .email('Email is invalid')\n      .required('Email is required'),\n    password: Yup.string()\n      .min(6, 'Password must be at least 6 charaters')\n      .required('Password is required'),\n    confirmPassword: Yup.string()\n      .oneOf([Yup.ref('password'), null], 'Password must match')\n      .required('Confirm password is required')\n  });\n\n  return (\n    <Formik\n      initialValues={{\n        firstName: '',\n        lastName: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n      }}\n      validationSchema={validate}\n      onSubmit={values => {\n        console.log(values);\n      }}\n      ></Formik>\n  )\n}\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAO,sCAAP;;AAGA,OAAO,MAAMC,MAAM,GAAG,MAAM;EAC1B,MAAMC,QAAQ,GAAGH,GAAG,CAACI,MAAJ,CAAW;IAC1BC,SAAS,EAAEL,GAAG,CAACM,MAAJ,GACRC,GADQ,CACJ,CADI,EACD,+BADC,EAERC,GAFQ,CAEJ,EAFI,EAEA,+BAFA,EAGRC,QAHQ,CAGC,UAHD,CADe;IAK1BC,QAAQ,EAAEV,GAAG,CAACM,MAAJ,GACPE,GADO,CACH,EADG,EACC,+BADD,EAEPC,QAFO,CAEE,UAFF,CALgB;IAQ1BE,KAAK,EAAEX,GAAG,CAACM,MAAJ,GACJK,KADI,CACE,kBADF,EAEJF,QAFI,CAEK,mBAFL,CARmB;IAW1BG,QAAQ,EAAEZ,GAAG,CAACM,MAAJ,GACPC,GADO,CACH,CADG,EACA,uCADA,EAEPE,QAFO,CAEE,sBAFF,CAXgB;IAc1BI,eAAe,EAAEb,GAAG,CAACM,MAAJ,GACdQ,KADc,CACR,CAACd,GAAG,CAACe,GAAJ,CAAQ,UAAR,CAAD,EAAsB,IAAtB,CADQ,EACqB,qBADrB,EAEdN,QAFc,CAEL,8BAFK;EAdS,CAAX,CAAjB;EAmBA,oBACE,QAAC,MAAD;IACE,aAAa,EAAE;MACbJ,SAAS,EAAE,EADE;MAEbK,QAAQ,EAAE,EAFG;MAGbC,KAAK,EAAE,EAHM;MAIbC,QAAQ,EAAE,EAJG;MAKbC,eAAe,EAAE;IALJ,CADjB;IAQE,gBAAgB,EAAEV,QARpB;IASE,QAAQ,EAAEa,MAAM,IAAI;MAClBC,OAAO,CAACC,GAAR,CAAYF,MAAZ;IACD;EAXH;IAAA;IAAA;IAAA;EAAA,QADF;AAeD,CAnCM;KAAMd,M"},"metadata":{},"sourceType":"module"}